exit
User.all[0]
User.all.count
continue
exit
Tweet.all[0]
User.all[0]
user
exit
User.all[0].followers
User.all[0].followers = 1
User.all[0].followers
User.all[0][5]
User.all[0]
User.all[0].increment(:following)
User.all[0].increment(:tweets)
User.all[100]
User.all[0]
exit
a.to_a[0][1] - x.to_a[0][1]
a.to_a[0]
x
a
a.get(time)
a.params
a
a.params[:time]
a.time
a(:time)
a[2]
a.time - x.time
a
a[0]
a[0] - x[0]
x.dup - a.dup
a.dup
x.to_json - a.to_json
a.to_json
(x.to_a - a.to_a).to_h
x.to_a - a.to_a
x.to_a
a.to_a
a - x
b
x = get_status
b = get_status
get_status
b = get_status
a = get_status
get_status
exit
continue
exit
user[0][:name]
user[0]
user[1]
user
user.get(name)
user
user.name
user[:name]
Tweet.new do
Tweet.create(author_id: row[0].to_i, author_name: user[:name], text: row[1], created_at: row[2])
(author_id: row[0].to_i, author_name: user[:name], text: row[1], created_at: row[2])
user
user = User.where(id: row[0].to_i)
User.where(id: row[0].to_i)
row[0]
exit
continue
user
continue
User.where(id: row[0].to_i)
User.all[1]
User.all[0]
user.id
user
row[0].to_i
ro[0].to_i
row[0]
row
continue
Dir.cwd
Dir.pwd
continue
conitnue
continue
User.delete(user[0].id)
User.where(user_name: name).delete
User.where(user_name: name)
user
continue
user[0]
user
continue
tweet[0]
tweet = Tweet.where(author_name: name)
Tweet.where(author_name: name)
user
continue
Tweet.where(author_name: name)[0]
if Tweet.where(author_name: name)[0]
Tweet.where(author_name: name)[0].exist?
Tweet.where(author_name: name)[0].exists?
Tweet.where(author_name: name)[0]
Tweet.where(author_name: name)
Tweet.where(author_name: name).delete
Tweet.where(author_name: name)
user[0][:user_name]
user[0]
user
Tweet.where(author_name: user[0][:user_name])
continue
user[0][:user_name]
user[0].id
user.id
u.id
user
User.where(user_name: name).select(:id)
User.where(user_name: name).select(:user_name)
User.where(user_name: name).user_name
User.where(user_name: name).ids
User.where(user_name: name).id
User.where(user_name: name).name
User.where(user_name: name)[0]
User.where(user_name: name)[:name]
User.where(user_name: name)
User.where(user_name: name)[:id]
User.all[0][:id]
User.all[0].select(:id)
User.all[0]
User[0]
User.all.select("id")
User.all.select(:id)
User[:id].all
User[:id]
User[id]
User
DB
User[:user_name]
User.all[:user_name]
User.all.select(:email).to_json
User.all.select(:email)
User.all.select(:user_name)
User.all
User
User.all.select(:user_name)
User.select(:user_name)
user.select("user_name")
user.select
user
User[:user_name]
user.select(:name)
user
user.select(:user_name)
user.user_name
user:user_name
user.user_name
user
Tweet.where(author_name: user)
user = User.where(user_name: name)
User.where(user_name: name)
name = "BearHammer"
User.all
Tweet.all
user
Tweet.where(author_name: user)
user = User.where(user_name: name)
Tweet.where(author_name: user)
User.where(user_name: name)
name = "ACE"
Tweet.where(author_name: user)
user
continue
User.where(username: name)
Tweet.where(author_name: user)
name = "ACE"
User.all
User.all.name
Tweet.where(author_name: user)
name = "Anne"
name
Tweet.where(author_name: user)
continue
Tweet.where(author_name: user)
user
continue
Tweet.all
Tweet.where(author: "ACE")
Tweet.where(author: "BearHammer")
User.all
User
Tweet.where(author: user)
user
name
user.first
user[1]
user[1].id
user
continue
tweets
users
continue
tweets
time
continue
status
x
c
last_response.body.include?("Logout")
last_response.body
c
quit
last_response.body
c
User.all
c
User.all
c
already_existed
c
C
c
quit
follow
c
follow
c
follow
c
follow
c
follow
c
follow
c
f
c
followed
follower
c
f
followed
follower
c
request.path_info
c
request.path_info
c
request.path_info
c
request.path_info
c
request.path_info
reques.path_info
c
