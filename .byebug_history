c
@tweets
c
quit
@tweets
c
pfeed
c
quit
@tweets
c
quit
@tweets
c
user_id
c
$redis.flushdb
c
JSON.parse(@tweets[0])
@tweets[0]
@tweets
c
@tweets
c
@tweets
c
quit
$redis.lrange("ffeed", 0, -1)
ffeed
c
$redis.flushdb
quit
c
ffeed
c
ffeed
c
ffeed
quit
ffeed
quit
@tweets
c
@tweets
c
$redis.flushdb
@tweets
quit
@tweets
quit
@tweets
c
quit 
$redis.flushdb
t
t= JSON.parse(@tweets)
t
t = JSON.parse(@tweets)
t= JSON.parse(@tweets)
JSON.parse(@tweets)
@tweets
c
@tweets
quit
@tweets
c
$redis.smembers("tweet:3150")
c
tweet
t
c
quit
last_response.body
c
tweet
c
JSON.parse(tweet)
tweet["text"]
tweet
c
@tweets
quit
@tweets
quit
RedisClass.access_ffeed
self.access_ffeed
$redis.lrange("ffeed",0,7).reverse
$redis.lrange("ffeed",0,7)
JSON.parse($redis.lrange("ffeed",0,7))
JSON.parse($redis.lrange("ffeed",0,7)
c
$redis.lrange("ffeed", 0,7)
c
$redis.lrange("user:1:pfeed", 0, -1)
User.all
c
quit
$redis.smembers("user:#{user_id}:follows")
c
quit
@tweets
c
@tweets
quit
c
user
c
user
quit
User.where(id: 1)[0]
User.where(id: 1)
User.all[0].name
User.all[0]
User.all
User.find(2)
user.find(2)
row
user
c
User.all
Follow.all
c
 quit
row
c
row
exit
keys
exit
"pepe".join
@input.delete_at(0)
@input.delete_at(0
@input.delete_at(0).join
@input
exit
a["created_at"]
a.created_at
a
exit
t
continue
Tweet.all
exit
@user[0]
@user.user_name
@user
continue
@user = User.where(user_name: @input[1])
exit
@user = User.where(user_name: @input[1])
User.where(user_name: @input[1]).exists?
User.where(user_name: @input[1].exists?
@input
exit
continue
User.all
u
quit
params[:email]
